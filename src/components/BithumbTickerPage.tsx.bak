'use client';

import React, { useEffect, useState, useMemo, useCallback, useRef } from 'react';
import Link from 'next/link';
import {
  Container,
  Typography,
  Paper,
  List,
  ListItem,
  ListItemText,
  CircularProgress,
  Alert,
  TextField,
  Box,
  Divider,
  useTheme,
  IconButton,
  Button,
  Drawer,
  ListItemButton,
  Chip,
  ToggleButtonGroup,
  ToggleButton
} from '@mui/material';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import SortIcon from '@mui/icons-material/Sort';
import LocalFireDepartmentIcon from '@mui/icons-material/LocalFireDepartment';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import TrendingDownIcon from '@mui/icons-material/TrendingDown';
import { ProcessedBithumbTicker, BithumbMarket } from '@/services/bithumb/types';
import { fetchBithumbTickers } from '@/services/bithumb/api';
import { useSearchStore } from '@/stores/searchStore';
import { useSortStore, SortableField, SortDirection } from '@/stores/sortStore';

const REFRESH_INTERVAL = 3000; // 3 seconds for Bithumb API to avoid rate limits
const PRICE_EFFECT_DURATION = 200;

interface DisplayTicker extends ProcessedBithumbTicker {
  priceEffect?: 'up' | 'down' | 'flat';
}

interface BithumbTickerPageProps {
  title?: string;
}

const sortableFieldsOptions: { value: SortableField; label: string }[] = [
  { value: 'none', label: 'None' },
  { value: 'symbol', label: 'Symbol' },
  { value: 'lastPrice', label: 'Last Price' },
  { value: 'price24hPcnt', label: '24h Change %' },
  { value: 'volume24h', label: 'Volume 24h' },
  { value: 'turnover24h', label: 'Turnover 24h' },
];

interface SuggestedSymbolInfo {
  symbol: string;
  lastPrice?: string;
  price24hPcnt?: string;
  originalChange?: number; 
  suggestionType: 'turnover' | 'positive' | 'negative';
  market: BithumbMarket;
}

const formatNumberWithCommas = (value: string | number | undefined): string => {
  if (value === undefined || value === null) return 'N/A';
  const numStr = String(value);
  const parts = numStr.split('.');
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return parts.join('.');
};

// Format change percentage to always show + sign for zero or positive values
const formatChangePercentage = (value: string | number | undefined): string => {
  if (value === undefined || value === null) return 'N/A';
  const numValue = parseFloat(String(value));
  
  if (numValue === 0) {
    return '+0.00%';
  } else if (numValue > 0) {
    return `+${formatNumberWithCommas(value)}%`;
  } else {
    return `${formatNumberWithCommas(value)}%`;
  }
};

export default function BithumbTickerPageComponent({ title = 'Bithumb Market Tickers (Live)' }: BithumbTickerPageProps) {
  const theme = useTheme();
  const [krwTickers, setKrwTickers] = useState<DisplayTicker[]>([]);
  const [usdtTickers, setUsdtTickers] = useState<DisplayTicker[]>([]);
  const [btcTickers, setBtcTickers] = useState<DisplayTicker[]>([]);
  const [loading, setLoading] = useState({
    KRW: true,
    USDT: true,
    BTC: true
  });
  const [error, setError] = useState<Record<BithumbMarket, string | null>>({
    KRW: null,
    USDT: null,
    BTC: null
  });
  const [isBottomSheetOpen, setIsBottomSheetOpen] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);

  const searchTerm = useSearchStore((state) => state.searchTerms['bithumb_spot'] || '');
  const setSearchTermForCategory = useSearchStore((state) => state.setSearchTerm);

  const { field: sortField, direction: sortDirection } = useSortStore((state) => state.sortCriteria['bithumb_spot']);
  const setSortCriteriaForCategory = useSortStore((state) => state.setSortCriteria);

  const prevTickersRef = useRef<Map<string, DisplayTicker>>(new Map());
  const timeoutRef = useRef<Map<string, NodeJS.Timeout>>(new Map());

  const fetchData = useCallback(async (isInitialLoad = false) => {
    if (isInitialLoad) setLoading(true);
    try {
      const currentTickers = await fetchBithumbTickers(selectedMarket);
      const newDisplayTickers = currentTickers.map(currentTicker => {
        const key = `${currentTicker.symbol}_${currentTicker.market}`;
        const prevTicker = prevTickersRef.current.get(key);
        let priceEffect: 'up' | 'down' | 'flat' | undefined = undefined;
        
        if (prevTicker && prevTicker.lastPrice && currentTicker.lastPrice) {
          const prevPriceNum = parseFloat(prevTicker.lastPrice);
          const currentPriceNum = parseFloat(currentTicker.lastPrice);
          if (currentPriceNum > prevPriceNum) priceEffect = 'up';
          else if (currentPriceNum < prevPriceNum) priceEffect = 'down';
          else priceEffect = 'flat';
        }
        
        return { ...currentTicker, priceEffect };
      });
      
      setTickers(newDisplayTickers);
      
      const newPrevTickersMap = new Map<string, DisplayTicker>();
      newDisplayTickers.forEach(ticker => {
        const key = `${ticker.symbol}_${ticker.market}`;
        newPrevTickersMap.set(key, ticker);
        
        if (ticker.priceEffect === 'up' || ticker.priceEffect === 'down') {
          const existingTimeout = timeoutRef.current.get(key);
          if (existingTimeout) clearTimeout(existingTimeout);
          
          const newTimeout = setTimeout(() => {
            setTickers(prev => prev.map(t => {
              if (t.symbol === ticker.symbol && t.market === ticker.market) {
                return { ...t, priceEffect: 'flat' };
              }
              return t;
            }));
            timeoutRef.current.delete(key);
          }, PRICE_EFFECT_DURATION);
          
          timeoutRef.current.set(key, newTimeout);
        }
      });
      
      prevTickersRef.current = newPrevTickersMap;
      setError(null);
    } catch (err: any) {
      console.error(`Error fetching Bithumb ${selectedMarket} tickers:`, err.message);
      if (isInitialLoad) setError(err.message || 'An unknown error occurred');
    }
    
    if (isInitialLoad) setLoading(false);
  }, [selectedMarket]);

  useEffect(() => {
    fetchData(true);
    const intervalId = setInterval(() => fetchData(false), REFRESH_INTERVAL);
    
    return () => {
      clearInterval(intervalId);
      timeoutRef.current.forEach(timeoutId => clearTimeout(timeoutId));
      if (timeoutRef.current.clear) {
        timeoutRef.current.clear();
      } else {
        // Alternative if clear() is not available
        timeoutRef.current = new Map();
      }
    };
  }, [fetchData, selectedMarket]);

  const unifiedSuggestedSymbols: SuggestedSymbolInfo[] = useMemo(() => {
    if (!tickers || tickers.length === 0) return [];
    const suggestions: SuggestedSymbolInfo[] = [];
    const addedSymbols = new Set<string>();

    // Top by turnover
    [...tickers]
      .filter(t => t.turnover24h && parseFloat(t.turnover24h) > 0)
      .sort((a, b) => parseFloat(b.turnover24h) - parseFloat(a.turnover24h))
      .slice(0, 3)
      .forEach(t => {
        const key = `${t.symbol}_${t.market}`;
        if (!addedSymbols.has(key)) {
          suggestions.push({ 
            symbol: t.symbol, 
            lastPrice: t.lastPrice, 
            price24hPcnt: t.price24hPcnt,
            market: t.market,
            suggestionType: 'turnover' 
          });
          addedSymbols.add(key);
        }
      });

    // Top positive changes
    const positiveChangeSymbols = [...tickers]
      .filter(t => t.price24hPcnt && parseFloat(t.price24hPcnt) > 0)
      .sort((a, b) => parseFloat(b.price24hPcnt) - parseFloat(a.price24hPcnt))
      .slice(0, 3);

    positiveChangeSymbols.forEach(t => {
      const key = `${t.symbol}_${t.market}`;
      if (!addedSymbols.has(key)) {
        suggestions.push({
          symbol: t.symbol,
          lastPrice: t.lastPrice,
          price24hPcnt: t.price24hPcnt,
          originalChange: parseFloat(t.price24hPcnt),
          market: t.market,
          suggestionType: 'positive'
        });
        addedSymbols.add(key);
      }
    });

    // Top negative changes
    const negativeChangeSymbols = [...tickers]
      .filter(t => t.price24hPcnt && parseFloat(t.price24hPcnt) < 0)
      .sort((a, b) => parseFloat(a.price24hPcnt) - parseFloat(b.price24hPcnt))
      .slice(0, 3);

    negativeChangeSymbols.forEach(t => {
      const key = `${t.symbol}_${t.market}`;
      if (!addedSymbols.has(key)) {
        suggestions.push({
          symbol: t.symbol,
          lastPrice: t.lastPrice,
          price24hPcnt: t.price24hPcnt,
          originalChange: parseFloat(t.price24hPcnt),
          market: t.market,
          suggestionType: 'negative'
        });
        addedSymbols.add(key);
      }
    });

    return suggestions;
  }, [tickers]);

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTermForCategory('bithumb_spot', event.target.value);
  };

  const handleTextFieldFocus = () => {
    setShowSuggestions(true);
  };

  const handleTextFieldBlur = () => {
    // Delay hiding suggestions to allow clicking on them
    setTimeout(() => setShowSuggestions(false), 200);
  };

  const handleSuggestionClick = (symbol: string) => {
    setSearchTermForCategory('bithumb_spot', symbol);
  };

  const handleSortDirectionToggle = () => {
    setSortCriteriaForCategory('bithumb_spot', sortField, sortDirection === 'asc' ? 'desc' : 'asc');
  };

  const handleOpenBottomSheet = () => setIsBottomSheetOpen(true);
  const handleCloseBottomSheet = () => setIsBottomSheetOpen(false);

  const handleSortFieldSelect = (field: SortableField) => {
    setSortCriteriaForCategory('bithumb_spot', field, sortDirection);
    handleCloseBottomSheet();
  };

  const handleMarketChange = (
    _event: React.MouseEvent<HTMLElement>,
    newMarket: BithumbMarket | null,
  ) => {
    if (newMarket) {
      setSelectedMarket(newMarket);
    }
  };

  const processedTickers = useMemo(() => {
    let tickersToProcess = [...tickers];
    const currentSearchTerm = searchTerm || '';
    
    if (currentSearchTerm) {
      tickersToProcess = tickersToProcess.filter(ticker => 
        ticker.symbol.toUpperCase().includes(currentSearchTerm.toUpperCase())
      );
    }
    
    if (sortField !== 'none' && sortField && sortableFieldsOptions.some(opt => opt.value === sortField)) {
      tickersToProcess.sort((a, b) => {
        const valA = a[sortField as keyof ProcessedBithumbTicker];
        const valB = b[sortField as keyof ProcessedBithumbTicker];
        
        if (valA === null || valA === undefined) return sortDirection === 'asc' ? -1 : 1;
        if (valB === null || valB === undefined) return sortDirection === 'asc' ? 1 : -1;
        
        let comparison = 0;
        const numA = parseFloat(valA.toString());
        const numB = parseFloat(valB.toString());
        
        if (!isNaN(numA) && !isNaN(numB)) {
          comparison = numA - numB;
        } else {
          comparison = valA.toString().localeCompare(valB.toString());
        }
        
        return sortDirection === 'asc' ? comparison : -comparison;
      });
    }
    
    return tickersToProcess;
  }, [tickers, searchTerm, sortField, sortDirection]);

  if (loading && tickers.length === 0) {
    return <Box sx={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh'}}><CircularProgress size={60} /></Box>;
  }

  return (
    <Container maxWidth="lg">
      <Paper sx={{ padding: { xs: 2, sm: 3 }, marginY: 2, borderRadius: 0 }}>
        <Typography variant="h4" component="h1" gutterBottom align="center">
          {title}
        </Typography>

        {error && (
          <Alert severity="warning" sx={{marginY: 2}}>
            {error} (Data might be stale if refresh fails)
          </Alert>
        )}

        <Box sx={{ 
          display: 'flex', 
          flexWrap: 'wrap', 
          gap: 2, 
          marginBottom: 3, 
          alignItems: 'center', 
          justifyContent: 'center' 
        }}>
          <Box sx={{ position: 'relative', flexGrow: 1, minWidth: { xs: '100%', sm: 'auto' }, width: {sm: 'calc(60% - 8px)', md: 'auto'} }}>
            <TextField
              fullWidth
              label="Search Symbol (e.g., BTC)"
              variant="outlined"
              value={searchTerm || ''}
              onChange={handleSearchChange}
              onFocus={handleTextFieldFocus}
              onBlur={handleTextFieldBlur}
            />
            {showSuggestions && unifiedSuggestedSymbols.length > 0 && (
              <Paper sx={{
                position: 'absolute',
                top: '100%',
                left: 0,
                right: 0,
                zIndex: theme.zIndex.modal,
                maxHeight: 350, 
                overflowY: 'auto',
                border: `1px solid ${theme.palette.divider}`,
                borderTop: 0,
                borderBottomLeftRadius: theme.shape.borderRadius,
                borderBottomRightRadius: theme.shape.borderRadius,
                py: 0.5 
              }}>
                <List dense disablePadding>
                  {unifiedSuggestedSymbols.map((item) => {
                    let color = 'text.secondary';
                    if (item.suggestionType === 'turnover') {
                      const change = parseFloat(item.price24hPcnt || '');
                      if (change > 0) color = theme.palette.success.main;
                      else if (change < 0) color = theme.palette.error.main;
                    } else if (item.originalChange) {
                      if (item.originalChange > 0) color = theme.palette.success.main;
                      else if (item.originalChange < 0) color = theme.palette.error.main;
                    }
                    
                    return (
                      <ListItemButton key={`suggestion-${item.symbol}-${item.market}`} onClick={() => handleSuggestionClick(item.symbol)} sx={{py:0.5}}>
                        <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                          {item.suggestionType === 'turnover' && <LocalFireDepartmentIcon fontSize="small" sx={{color: theme.palette.warning.main, mr: 1}} />}
                          {item.suggestionType === 'positive' && <TrendingUpIcon fontSize="small" color="success" sx={{mr: 1}} />}
                          {item.suggestionType === 'negative' && <TrendingDownIcon fontSize="small" color="error" sx={{mr: 1}} />}
                          
                          <Box sx={{ display: 'flex', flexDirection: 'column', flexGrow: 1 }}>
                            <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                              {item.symbol}
                              <Chip 
                                label={item.market} 
                                size="small" 
                                sx={{ ml: 1, height: 16, fontSize: '0.6rem' }} 
                              />
                            </Typography>
                            <Typography variant="caption" sx={{ color }}>
                              {formatNumberWithCommas(item.lastPrice || '')} ({formatChangePercentage(item.price24hPcnt)})
                            </Typography>
                          </Box>
                        </Box>
                      </ListItemButton>
                    );
                  })}
                </List>
              </Paper>
            )}
          </Box>
          
          <Box sx={{ minWidth: { xs: '100%', sm: 'auto' } }}> 
            <Button 
              variant="outlined" 
              startIcon={<SortIcon />} 
              onClick={handleOpenBottomSheet}
              fullWidth={false}
              sx={{ height: '56px' }}
            >
              Sort By: {sortableFieldsOptions.find(opt => opt.value === (sortField || 'none'))?.label || 'None'}
            </Button>
          </Box>
          
          <Box sx={{ minWidth: { xs: 'auto', sm: 'auto' }, display:'flex', alignItems:'center' }}> 
            <IconButton 
              onClick={handleSortDirectionToggle} 
              disabled={sortField === 'none'}
              color="primary"
              aria-label={sortDirection === 'asc' ? "Sort Ascending" : "Sort Descending"}
            >
              {sortDirection === 'asc' ? <ArrowUpwardIcon /> : <ArrowDownwardIcon />}
            </IconButton>
          </Box>
        </Box>

        <Box sx={{ mb: 3, display: 'flex', justifyContent: 'center' }}>
          <ToggleButtonGroup
            value={selectedMarket}
            exclusive
            onChange={handleMarketChange}
            aria-label="market selection"
          >
            <ToggleButton value="KRW" aria-label="KRW market">
              KRW
            </ToggleButton>
            <ToggleButton value="USDT" aria-label="USDT market">
              USDT
            </ToggleButton>
            <ToggleButton value="BTC" aria-label="BTC market">
              BTC
            </ToggleButton>
          </ToggleButtonGroup>
        </Box>

        <Drawer anchor="bottom" open={isBottomSheetOpen} onClose={handleCloseBottomSheet}>
          <Box sx={{ padding: 2 }}>
            <Typography variant="h6" gutterBottom component="div" sx={{textAlign: 'center'}}>Sort By</Typography>
            <List>
              {sortableFieldsOptions.map(option => (
                <ListItemButton 
                  key={option.value} 
                  selected={sortField === option.value}
                  onClick={() => handleSortFieldSelect(option.value)}
                >
                  <ListItemText primary={option.label} />
                </ListItemButton>
              ))}
            </List>
          </Box>
        </Drawer>

        {processedTickers.length === 0 && !loading && (
          <Typography sx={{textAlign: 'center', color: 'text.secondary', mt: 3}}>
            {tickers.length > 0 ? 'No tickers found for your search or sort criteria.' : 'No tickers available or failed to load initially.'}
          </Typography>
        )}

        {processedTickers.length > 0 && (
          <List sx={{ maxHeight: 600, overflow: 'auto', border: '1px solid', borderColor: 'divider', borderRadius: 0, p:0 }}>
            {processedTickers.map((ticker, index) => {
              const numeric24hChange = parseFloat(ticker.price24hPcnt);
              const displayPercentText = formatChangePercentage(ticker.price24hPcnt);

              let sharedTextColor = theme.palette.grey[700];
              if (numeric24hChange > 0) sharedTextColor = theme.palette.success.main;
              else if (numeric24hChange < 0) sharedTextColor = theme.palette.error.main;

              const valueDisplayBaseSx = {
                display: 'inline-block', 
                padding: '2px 4px', 
                borderWidth: '1px', 
                borderStyle: 'solid',
                borderColor: 'transparent', 
                borderRadius: 0, 
                transition: 'color 0.1s ease-in-out',
              };
              
              const lastPriceValueSx = {
                ...valueDisplayBaseSx, 
                transition: 'border-color 0.1s ease-in-out, color 0.1s ease-in-out',
                borderColor: ticker.priceEffect === 'up' ? theme.palette.success.main : 
                             ticker.priceEffect === 'down' ? theme.palette.error.main : 
                             valueDisplayBaseSx.borderColor,
                color: sharedTextColor,
              };
              
              const changeValueSx = { ...valueDisplayBaseSx, color: sharedTextColor };
              
              // Adjusted flexBasis for items
              const dataItemContainerSx = (isSymbol = false) => ({
                flexBasis: { xs: 'calc(50% - 4px)', sm: 'calc(25% - 8px)', md: isSymbol ? 'calc(20% - 8px)' : 'calc(20% - 8px)' },
                width: { xs: 'calc(50% - 4px)', sm: 'calc(25% - 8px)', md: isSymbol ? 'calc(20% - 8px)' : 'calc(20% - 8px)' },
              });

              return (
                <React.Fragment key={`${ticker.symbol}_${ticker.market}`}>
                  <ListItem 
                    sx={{ py: 1.5, '&:hover': { backgroundColor: theme.palette.action.hover }, textDecoration: 'none', color: 'inherit' }}
                  >
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', width: '100%', gap: 1 }}>
                      <Box sx={{ ...dataItemContainerSx(true), pr:1 }}>
                        <Typography variant="subtitle1" sx={{fontWeight: 'bold'}}>
                          {ticker.symbol}
                          <Chip 
                            label={ticker.market} 
                            size="small" 
                            sx={{ ml: 1, height: 16, fontSize: '0.6rem' }} 
                          />
                        </Typography>
                      </Box>
                      <Box sx={dataItemContainerSx()}> 
                        <ListItemText 
                          primaryTypographyProps={{variant:'caption', color:'text.secondary'}} 
                          primary="Last Price" 
                          secondary={<Box component="span" sx={lastPriceValueSx}>{formatNumberWithCommas(ticker.lastPrice)}</Box>} 
                        />
                      </Box>
                      <Box sx={dataItemContainerSx()}>
                        <ListItemText 
                          primaryTypographyProps={{variant:'caption', color:'text.secondary'}} 
                          primary="24h Change" 
                          secondary={<Box component="span" sx={changeValueSx}>{displayPercentText}</Box>} 
                        />
                      </Box>
                      <Box sx={dataItemContainerSx()}>
                        <ListItemText 
                          primaryTypographyProps={{variant:'caption', color:'text.secondary'}} 
                          primary="24h Volume" 
                          secondary={<Box component="span" sx={valueDisplayBaseSx}>{formatNumberWithCommas(ticker.volume24h)}</Box>} 
                        />
                      </Box>
                      <Box sx={dataItemContainerSx()}>
                        <ListItemText 
                          primaryTypographyProps={{variant:'caption', color:'text.secondary'}} 
                          primary="24h Turnover" 
                          secondary={<Box component="span" sx={valueDisplayBaseSx}>{formatNumberWithCommas(ticker.turnover24h)}</Box>} 
                        />
                      </Box>
                    </Box>
                  </ListItem>
                  {index < processedTickers.length - 1 && <Divider />}
                </React.Fragment>
              );
            })}
          </List>
        )}
      </Paper>
    </Container>
  );
}
